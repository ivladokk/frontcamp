1. Create an index which will be used by this query and provide proof (from explain() or Compass UI) that the index
is indeed used by the winning plan:
db.restaurants.find({ name: "Glorious Food" }) 

db.restaurants.createIndex({name:1})

Result:
{
 "stage": "IXSCAN",
 "nReturned": 1,
 "executionTimeMillisEstimate": 30,
 "works": 2,
 "advanced": 1,
 "needTime": 0,
 "needYield": 0,
 "saveState": 1,
 "restoreState": 1,
 "isEOF": 1,
 "invalidates": 0,
 "keyPattern": {
  "name": 1
 },
 "indexName": "name",
 "isMultiKey": false,
 "multiKeyPaths": {
  "name": []
 },
 "isUnique": false,
 "isSparse": false,
 "isPartial": false,
 "indexVersion": 2,
 "direction": "forward",
 "indexBounds": {
  "name": [
   "[\"Glorious Food\", \"Glorious Food\"]"
  ]
 },
 "keysExamined": 1,
 "seeks": 1,
 "dupsTested": 0,
 "dupsDropped": 0,
 "seenInvalidated": 0,
 "parentName": "FETCH"
}


2. db.restaurants.dropIndex("name_1")




3. Create an index to make this query covered and provide proof (from explain() or Compass UI) that it is indeed
covered: db.restaurants.find({ restaurant_id: "41098650" }, { _id: 0, borough: 1 }) 

db.restaurants.createIndex({restaraunt_id:1, borough: 1})
{
 "stage": "IXSCAN",
 "nReturned": 1,
 "executionTimeMillisEstimate": 0,
 "works": 2,
 "advanced": 1,
 "needTime": 0,
 "needYield": 0,
 "saveState": 0,
 "restoreState": 0,
 "isEOF": 1,
 "invalidates": 0,
 "keyPattern": {
  "restaurant_id": 1,
  "borough": 1
 },
 "indexName": "asd",
 "isMultiKey": false,
 "multiKeyPaths": {
  "restaurant_id": [],
  "borough": []
 },
 "isUnique": false,
 "isSparse": false,
 "isPartial": false,
 "indexVersion": 2,
 "direction": "forward",
 "indexBounds": {
  "restaurant_id": [
   "[\"41098650\", \"41098650\"]"
  ],
  "borough": [
   "[MinKey, MaxKey]"
  ]
 },
 "keysExamined": 1,
 "seeks": 1,
 "dupsTested": 0,
 "dupsDropped": 0,
 "seenInvalidated": 0,
 "parentName": "PROJECTION"
}


4. Create a partial index on cuisine field which will be used only when filtering on borough equal to “Staten Island”:
db.restaurants.find({ borough: "Staten Island", cuisine: "American" }) – uses index
db.restaurants.find({ borough: "Staten Island", name: "Bagel Land" }) – does not use index
db.restaurants.find({ borough: "Queens", cuisine: "Pizza" }) – does not use index 


db.restaurants.createIndex({borough:1}, {partialFilterExpression:{borough:"Staten Island", cuisine:{"$exists":true}}})

Query: db.restaurants.find({ borough: "Staten Island", cuisine: "American" }) 
Result:
{
 "stage": "IXSCAN",
 "nReturned": 969,
 "executionTimeMillisEstimate": 0,
 "works": 970,
 "advanced": 969,
 "needTime": 0,
 "needYield": 0,
 "saveState": 7,
 "restoreState": 7,
 "isEOF": 1,
 "invalidates": 0,
 "keyPattern": {
  "borough": 1
 },
 "indexName": "borough_1",
 "isMultiKey": false,
 "multiKeyPaths": {
  "borough": []
 },
 "isUnique": false,
 "isSparse": false,
 "isPartial": true,
 "indexVersion": 2,
 "direction": "forward",
 "indexBounds": {
  "borough": [
   "[\"Staten Island\", \"Staten Island\"]"
  ]
 },
 "keysExamined": 969,
 "seeks": 1,
 "dupsTested": 0,
 "dupsDropped": 0,
 "seenInvalidated": 0,
 "parentName": "FETCH"
}

Query: db.restaurants.find({ borough: "Staten Island", name: "Bagel Land" }) 
